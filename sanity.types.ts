/**
 * ---------------------------------------------------------------------------------
 * This file has been generated by Sanity TypeGen.
 * Command: `sanity typegen generate`
 *
 * Any modifications made directly to this file will be overwritten the next time
 * the TypeScript definitions are generated. Please make changes to the Sanity
 * schema definitions and/or GROQ queries if you need to update these types.
 *
 * For more information on how to use Sanity TypeGen, visit the official documentation:
 * https://www.sanity.io/docs/sanity-typegen
 * ---------------------------------------------------------------------------------
 */

// Source: schema.json
export type SanityImagePaletteSwatch = {
	_type: 'sanity.imagePaletteSwatch';
	background?: string;
	foreground?: string;
	population?: number;
	title?: string;
};

export type SanityImagePalette = {
	_type: 'sanity.imagePalette';
	darkMuted?: SanityImagePaletteSwatch;
	darkVibrant?: SanityImagePaletteSwatch;
	dominant?: SanityImagePaletteSwatch;
	lightMuted?: SanityImagePaletteSwatch;
	lightVibrant?: SanityImagePaletteSwatch;
	muted?: SanityImagePaletteSwatch;
	vibrant?: SanityImagePaletteSwatch;
};

export type SanityImageDimensions = {
	_type: 'sanity.imageDimensions';
	aspectRatio?: number;
	height?: number;
	width?: number;
};

export type SanityFileAsset = {
	_createdAt: string;
	_id: string;
	_rev: string;
	_type: 'sanity.fileAsset';
	_updatedAt: string;
	altText?: string;
	assetId?: string;
	description?: string;
	extension?: string;
	label?: string;
	mimeType?: string;
	originalFilename?: string;
	path?: string;
	sha1hash?: string;
	size?: number;
	source?: SanityAssetSourceData;
	title?: string;
	uploadId?: string;
	url?: string;
};

export type Advertisement = {
	_createdAt: string;
	_id: string;
	_rev: string;
	_type: 'advertisement';
	_updatedAt: string;
	displayOnAllKiosks?: boolean;
	endDate?: string;
	image?: {
		_type: 'image';
		asset?: {
			_ref: string;
			_type: 'reference';
			_weak?: boolean;
			[internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
		};
		crop?: SanityImageCrop;
		hotspot?: SanityImageHotspot;
	};
	kiosks?: Array<
		| {
				_ref: string;
				_type: 'reference';
				_weak?: boolean;
				[internalGroqTypeReferenceTo]?: 'kioskBundle';
		  }
		| {
				_ref: string;
				_type: 'reference';
				_weak?: boolean;
				[internalGroqTypeReferenceTo]?: 'kiosk';
		  }
	>;
	name?: string;
	startDate?: string;
};

export type KioskBundle = {
	_id: string;
	_type: 'kioskBundle';
	_createdAt: string;
	_updatedAt: string;
	_rev: string;
	bundleName?: string;
	kiosks?: Array<{
		_ref: string;
		_type: 'reference';
		_weak?: boolean;
		_key: string;
		[internalGroqTypeReferenceTo]?: 'kiosk';
	}>;
};

export type IconMessage = {
	_id: string;
	_type: 'iconMessage';
	_createdAt: string;
	_updatedAt: string;
	_rev: string;
	message?: string;
	lightModeSvg?: {
		asset?: {
			_ref: string;
			_type: 'reference';
			_weak?: boolean;
			[internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
		};
		hotspot?: SanityImageHotspot;
		crop?: SanityImageCrop;
		_type: 'image';
	};
	darkModeSvg?: {
		asset?: {
			_ref: string;
			_type: 'reference';
			_weak?: boolean;
			[internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
		};
		hotspot?: SanityImageHotspot;
		crop?: SanityImageCrop;
		_type: 'image';
	};
	displayOnAllKiosks?: boolean;
	kiosks?: Array<
		| {
				_ref: string;
				_type: 'reference';
				_weak?: boolean;
				[internalGroqTypeReferenceTo]?: 'kioskBundle';
		  }
		| {
				_ref: string;
				_type: 'reference';
				_weak?: boolean;
				[internalGroqTypeReferenceTo]?: 'kiosk';
		  }
	>;
	realtimeOnly?: boolean;
	acrossStreetOnly?: boolean;
};

export type SanityImageCrop = {
	_type: 'sanity.imageCrop';
	bottom?: number;
	left?: number;
	right?: number;
	top?: number;
};

export type SanityImageHotspot = {
	_type: 'sanity.imageHotspot';
	height?: number;
	width?: number;
	x?: number;
	y?: number;
};

export type SanityImageAsset = {
	_createdAt: string;
	_id: string;
	_rev: string;
	_type: 'sanity.imageAsset';
	_updatedAt: string;
	altText?: string;
	assetId?: string;
	description?: string;
	extension?: string;
	label?: string;
	metadata?: SanityImageMetadata;
	mimeType?: string;
	originalFilename?: string;
	path?: string;
	sha1hash?: string;
	size?: number;
	source?: SanityAssetSourceData;
	title?: string;
	uploadId?: string;
	url?: string;
};

export type SanityAssetSourceData = {
	_type: 'sanity.assetSourceData';
	id?: string;
	name?: string;
	url?: string;
};

export type SanityImageMetadata = {
	_type: 'sanity.imageMetadata';
	blurHash?: string;
	dimensions?: SanityImageDimensions;
	hasAlpha?: boolean;
	isOpaque?: boolean;
	location?: Geopoint;
	lqip?: string;
	palette?: SanityImagePalette;
};

export type KioskBundle_2 = {
	_createdAt: string;
	_id: string;
	_rev: string;
	_type: 'kioskBundle';
	_updatedAt: string;
	bundleName?: string;
	kiosks?: Array<{
		_ref: string;
		_type: 'reference';
		_weak?: boolean;
		_key: string;
		[internalGroqTypeReferenceTo]?: 'kiosk';
	}>;
};

export type Kiosk = {
	_createdAt: string;
	_id: string;
	_rev: string;
	_type: 'kiosk';
	_updatedAt: string;
	additionalStopIds?: Array<string>;
	displayName?: string;
	hasLed?: boolean;
	iStop?: boolean;
	isHorizontal?: boolean;
	ledIp?: string;
	location?: Geopoint;
	phoneticName?: string;
	slug?: Slug;
	stopId?: string;
	useCentralizedService?: boolean;
};

export type Geopoint = {
	_type: 'geopoint';
	alt?: number;
	lat?: number;
	lng?: number;
};

export type Slug = {
	_type: 'slug';
	current?: string;
	source?: string;
};

export type AllSanitySchemaTypes =
	| SanityImagePaletteSwatch
	| SanityImagePalette
	| SanityImageDimensions
	| SanityFileAsset
	| Advertisement
	| KioskBundle
	| IconMessage
	| SanityImageCrop
	| SanityImageHotspot
	| SanityImageAsset
	| SanityAssetSourceData
	| SanityImageMetadata
	| KioskBundle_2
	| Kiosk
	| Geopoint
	| Slug;
export declare const internalGroqTypeReferenceTo: unique symbol;
